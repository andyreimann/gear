Ubershader "GEAR/GodraysBlur" {
   LocationBindings {
     inPosition ("Vertex Position", vec4) = { POSITION }
     inTexCoord ("Texture Coordinate", vec2) = { TEXCOORD_0 }
   }
   Properties {
       _godRays ("The godray base texture", sampler2D) = { SAMPLER_7 }
   }
   Shader "GLSL" {
     Settings {
        Name "GodraysBlurPass"
        // Define the Sampler, the output texture will be bound to
        RenderTarget SAMPLER_7
     }
     #VERTEXPROGRAM
       #version 330
       #INCLUDE "G2.matrices"
       #INCLUDE "G2.postprocess"
 
       out Data
       {
          vec2 texCoord;
          vec2 texCoords[4];
       } dataOut; 

       void main(void) 
       {
            dataOut.texCoord = inTexCoord;
            dataOut.texCoords[ 0] = dataOut.texCoord + vec2(postProcessInfo.pixelSize.x, 0.0);
            dataOut.texCoords[ 1] = dataOut.texCoord + vec2(-postProcessInfo.pixelSize.x, 0.0);
            dataOut.texCoords[ 2] = dataOut.texCoord + vec2(0.0, postProcessInfo.pixelSize.y);
            dataOut.texCoords[ 3] = dataOut.texCoord + vec2(0.0,-postProcessInfo.pixelSize.y);
           	gl_Position = inPosition;

       }
     #FRAGMENTPROGRAM
       #version 330

        in Data
        {
          vec2 texCoord;
          vec2 texCoords[4];
        } dataIn; // this data comes from the vertex program

        out vec4 outColor; // here goes the final color

        void main() 
        {
          outColor = vec4(0.0);
          outColor += texture(_godRays, dataIn.texCoords[ 0])*0.15;
          outColor += texture(_godRays, dataIn.texCoords[ 1])*0.15;
          outColor += texture(_godRays, dataIn.texCoord     )*0.4;
          outColor += texture(_godRays, dataIn.texCoords[ 2])*0.15;
          outColor += texture(_godRays, dataIn.texCoords[ 3])*0.15;
        }
   }
 }