Ubershader "GEAR/Default" {
   LocationBindings {
     inPosition ("Vertex Position", vec4) = { POSITION }
     inNormal ("Vertex Normal", vec3) = { NORMAL }
     inBinormal ("Vertex Binormal", vec3) = { BINORMAL }
     inTangent ("Vertex Tangent", vec3) = { TANGENT }
     inTexCoord ("Texture Coordinate", vec2) = { TEXCOORD_0 }
   }
   Properties {
       _normalTex ("The normal texture", sampler2D) = { NORMAL }
       _shadowTex ("The shadow texture of a pointlight", samplerCube) = { SHADOW }
       _csmTex ("The cascade shadow texture of a directional light", sampler2DArrayShadow) = { SAMPLER_6 }
   }
   Shader "GLSL" {
     #VERTEXPROGRAM
       #INCLUDE "G2.matrices"
 
       out Data
       {
          vec2 texCoord;
          vec3 normal;
          vec3 binormal;
          vec3 tangent;
          vec3 eye;
       } dataOut; 
 
       void main(void) 
       {
            dataOut.texCoord = inTexCoord;
            // transform normal, binormal and tangent vectors
            dataOut.normal = matrices.normal_matrix * inNormal;
            dataOut.binormal = matrices.normal_matrix * inBinormal;
            dataOut.tangent = matrices.normal_matrix * inTangent;
            dataOut.eye = -vec3(matrices.modelview_matrix * inPosition);

           	gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
       }
     #FRAGMENTPROGRAM
       #extension GL_EXT_texture_array : enable
       #INCLUDE "G2.material" // include GEAR default stuff
       #INCLUDE "G2.light" // include GEAR default stuff

        in Data
        {
          vec2 texCoord;
          vec3 normal;
          vec3 binormal;
          vec3 tangent;
          vec3 eye;
        } dataIn; // this data comes from the vertex program

        out vec4 outColor; // here goes the final color

        // Helper to transforms a given vertex into tangent space
        vec3 toTangentSpace(vec3 vector, mat3 tbnMatrix ) 
        {
            return normalize(vector * tbnMatrix);
        }

        int getCascadeIndex(int lightIndex) 
        {
          // find the appropriate depth map to look up in based on the depth of this fragment
          for(int i = 0; i < light[lightIndex].numCascades; ++i)
          {
            if(gl_FragCoord.z < light[lightIndex].zFar[i])
            {
              return i;
            }
          }
          return 0;
        }

        float toTexDepth( vec3 d, float near, float far) 
        {      
          float dist = max(max(abs(d.x),abs(d.y)),abs(d.z)); 
          float fmn = far - near;   
          dist = ((far+near)/(fmn)) + (1.0/dist)*((-2.0*far*near)/(fmn));   
          return (dist+1.0)/2.0;   
        }
   
        void main() 
        {

          vec3 normal = normalize(dataIn.normal);
          vec3 binormal = normalize(dataIn.binormal);
          vec3 tangent = normalize(dataIn.tangent);
          vec3 e = normalize(dataIn.eye);

          mat3 tbnMatrix = mat3(tangent, binormal, normal);
          // read normal from normalMap
          vec3 normalMapNormal = (texture(_normalTex, dataIn.texCoord).xyz);
          //Expand the normal-map into a normalized signed vector
          normal = (normalMapNormal -0.5) * 2.0;

          // set the specular term to black
          vec4 spec = vec4(0.0);

          // set color to ambient material term
          outColor = material.ambient;

          for(int i = 0; i < G2ActiveLights; ++i)
          {
            if(light[i].position.w == 0.0)
            {
              // directional light

              // calculate light direction in tangent space
              vec3 lightDir = normalize(toTangentSpace(light[i].direction,tbnMatrix));

              float intensity = max(dot(normal,lightDir), 0.0);

              // if the vertex is lit compute the specular color
              if (intensity > 0.0) 
              {
                float shadowMultiplier = 1.0;
                if(light[i].type == 0)
                {
                  // CSM
                  int csmIndex = getCascadeIndex(i);
                  // transform this fragment's position from eye space to scaled light clip space
                  // such that the xy coordinates are in [0;1]
                  // note there is no need to divide by w for othogonal light sources
                  vec4 shadowCoord = light[i].eyeToLightClip[csmIndex]*vec4(-dataIn.eye, 1.0);
                  // store the depth
                  shadowCoord.w = shadowCoord.z;
                
                  // tell glsl in which layer to do the look up
                  shadowCoord.z = float(csmIndex);

                  shadowMultiplier = shadow2DArray(_csmTex, shadowCoord).x;
                  float diff = shadowMultiplier - shadowCoord.w;
                  // smoothen the result a bit, to avoid aliasing at shadow contact point
                  shadowMultiplier = clamp( diff*250.0 + 1.0, 0.0, 1.0);
                }
                // compute the half vector
                vec3 h = normalize(lightDir + e);
                // compute the specular term into spec
                float intSpec = max(dot(h,normal), 0.0);
                spec = shadowMultiplier * light[i].specular * material.specular * pow(intSpec,material.shininess);
                outColor += max(shadowMultiplier * intensity * light[i].diffuse * material.diffuse + spec, light[i].ambient);
              }
              else
              {
                outColor += light[i].ambient;
              }
            }
            else if(light[i].cosCutoff < 1.0)
            {
              // spot light
              float intensity = 0.0;
              vec4 spec = vec4(0.0);
           
              // calculate light direction in tangent space
              vec3 l = vec3(light[i].position)+dataIn.eye;
              float dist = length(l);
              l = normalize(l);
              vec3 sd = normalize(vec3(-light[i].direction));
           
              // inside the cone?
              if (dot(sd,l) > light[i].cosCutoff) 
              {
                vec3 lightDirTangentSpace = toTangentSpace(light[i].direction,tbnMatrix);
                intensity = max(dot(normal,lightDirTangentSpace), 0.0);
         
                if (intensity > 0.0) 
                {
                    float att = 1.0 / (light[i].attenuation.x +
                            light[i].attenuation.y * dist +
                            light[i].attenuation.z * dist * dist);

                    vec3 eyeVecTangentSpace = toTangentSpace(e,tbnMatrix); 
                    vec3 reflection = reflect(lightDirTangentSpace, normal);
                    float intSpec = max(dot(reflection,eyeVecTangentSpace), 0.0);
                    spec = att * light[i].specular * material.specular * pow(intSpec, material.shininess);
                }
              }
              outColor += max(intensity * light[i].diffuse * material.diffuse + spec, light[i].ambient);
            }
            else
            {
              // point light
           
              // calculate light direction in tangent space
              vec3 lightDir = vec3(light[i].position)+dataIn.eye;
              float dist = length(lightDir);
              float texDepth = toTexDepth(lightDir, 0.01, 50.0);
              float shadowDepth = texture(_shadowTex, -lightDir).r; // pass l normalized for lookup
              // transform light direction to tangent space
              lightDir = toTangentSpace(lightDir,tbnMatrix); 

              vec4 spec = vec4(0.0);

              if( texDepth >= shadowDepth && texDepth < 1.0 )
              {
                // texel in shadow
                outColor += light[i].ambient; // only ambient light component influences
              }
              else
              {
                float intensity = max(dot(normal,lightDir), 0.0);
                if (intensity > 0.0) 
                {
                  vec3 eyeVecTangentSpace = toTangentSpace(e,tbnMatrix); 
                  vec3 reflection = reflect(-lightDir, normal);

                  float att = 1.0 / (light[i].attenuation.x +
                          light[i].attenuation.y * dist +
                          light[i].attenuation.z * dist * dist);
                  //vec3 h = normalize(l + e);

                  float intSpec = max(dot(reflect(-eyeVecTangentSpace, normal),lightDir), 0.0);
                  //float intSpec = max(dot(h,normal), 0.0);
                  spec = att * light[i].specular * material.specular * pow(intSpec, material.shininess);
                }
                outColor += max(intensity * light[i].diffuse * material.diffuse + spec, light[i].ambient);
              }
            }
          }
          //outColor = vec4(normal,1.0);
        }
   }
 }