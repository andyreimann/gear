Ubershader "GEAR/Multipass" {
   LocationBindings {
     inPosition ("Vertex Position", vec4) = { POSITION }
     inColor ("Vertex Color", vec4) = { COLOR_0 }
     inNormal ("Vertex Normal", vec3) = { NORMAL }
     inTexCoord ("Texture Coordinate", vec2) = { TEXCOORD_0 }
   }
   Properties {
       _reflectionMap ("The reflection map", sampler2D) = { DIFFUSE }
   }
   Shader "GLSL" {
     Passes {
        Pass {
           LocationBindings {
             inPosition ("Vertex Position", vec4) = { POSITION }
           }
           Settings {
              Name "WaterReflectionPass"
              RenderTarget DIFFUSE
              RenderType TEXTURE
              RenderTargetWidth 512
              RenderTargetHeight 512
              OutputFormat RGBA
              PointOfView MAIN_CAMERA_FLIP_Y
              FlipYLevel -3.5
           }

           #VERTEXPROGRAM
             #version 330
             #INCLUDE "G2.matrices" 
             out Data
             {
                vec4 clipPlane;
                vec3 eye;
             } dataOut; 

             void main(void) 
             {
                  dataOut.eye = vec3(matrices.modelview_matrix * inPosition);
                  dataOut.clipPlane = matrices.modelview_matrix * vec4(0.0,1,0.0,dot(vec3(0,1,0),vec3(0,-3.5,0)));
                  gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
             }
           #FRAGMENTPROGRAM
              #version 330
              #INCLUDE "G2.material" // include GEAR default stuff
           
              in Data
              {
                vec3 eye;
                vec4 clipPlane;
              } dataIn; // this data comes from the vertex program
 
              out vec4 outColor; // here goes the final color
              void main() 
              {
                float clipPos = dot (dataIn.eye, dataIn.clipPlane.xyz) + dataIn.clipPlane.w;
                if(clipPos < 0.0) 
                {
                  //discard;
                }
                outColor = g2_ambient + g2_diffuse;
              }
        }
     }
     #VERTEXPROGRAM
       #INCLUDE "G2.matrices"
 
       out Data
       {
          vec3 normal;
          vec3 eye;
          vec4 color;
          vec2 texCoord;
       } dataOut; 
 
       void main(void) 
       {
            dataOut.normal = matrices.normal_matrix * inNormal;
            dataOut.eye = -vec3(matrices.modelview_matrix * inPosition);
            dataOut.texCoord = inTexCoord;
            gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
            dataOut.color = inColor;
       }
     #FRAGMENTPROGRAM
       #version 330
       #INCLUDE "G2.material" // include GEAR default stuff
       #INCLUDE "G2.light" // include GEAR default stuff

        out vec4 outColor; // here goes the final color


        float toTexDepth( vec3 d, float near, float far) 
        {      
          float dist = max(max(abs(d.x),abs(d.y)),abs(d.z)); 
          float fmn = far - near;   
          dist = ((far+near)/(fmn)) + (1.0/dist)*((-2.0*far*near)/(fmn));   
          return (dist+1.0)/2.0;   
        }
           
        in Data
        {
          vec3 normal;
          vec3 eye;
          vec4 color;
          vec2 texCoord;
        } dataIn; // this data comes from the vertex program
 
        void main() 
        {

          // normalize both input vectors
          vec3 n = normalize(dataIn.normal);
          vec3 e = normalize(dataIn.eye);

          // set color to ambient material term

          for(int i = 0; i < G2ActiveLights; ++i)
          {
            // Compute the ligt direction
            vec3 l = vec3(light[i].position)+dataIn.eye;
            float dist = length(l);
            l = normalize(l);
            // point light
            vec4 spec = vec4(0.0);
            vec3 n = normalize(dataIn.normal);
            vec3 e = normalize(dataIn.eye);
            outColor = g2_ambient * texture(_reflectionMap, dataIn.texCoord);

            float intensity = max(dot(n,l), 0.0);
            if (intensity > 0.0) 
            {
              float att = 1.0 / (light[i].attenuation.x +
                      light[i].attenuation.y * dist +
                      light[i].attenuation.z * dist * dist);
              vec3 h = normalize(l + e);
              float intSpec = max(dot(h,n), 0.0);
              spec = att * light[i].specular * g2_specular * pow(intSpec, g2_shininess);
            }
            outColor += max(intensity * light[i].diffuse * g2_diffuse + spec, g2_ambient);
          }
        }
   }
 }