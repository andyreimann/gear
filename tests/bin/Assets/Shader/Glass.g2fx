Ubershader "GEAR/Glass" {
   LocationBindings {
     inPosition ("Vertex Position", vec4) = { POSITION }
     inNormal ("Vertex Normal", vec3) = { NORMAL }
   }
   Properties {
       _reflectionMap ("The reflection map", samplerCube) = { DIFFUSE }
   }
   Shader "GLSL" {
     Passes {
        Pass {
           LocationBindings {
             inPosition ("Vertex Position", vec4) = { POSITION }
           }
           Settings {
              Name "ReflectionPass"
              RenderTarget DIFFUSE
              RenderType CUBEMAP
              RenderTargetWidth 1024
              RenderTargetHeight 1024
              OutputFormat RGB
              PointOfView LOCAL
              ZNear 0.01
              ZFar 50.0
              FovY 90.0
              PolygonOffsetFactor 0.0
              PolygonOffsetUnits 0.0
           }
        }
     }
     #VERTEXPROGRAM
       #INCLUDE "G2.matrices"
 
       out Data
       {
          vec3 normal;
          vec3 eye;
       } dataOut; 
 
       void main(void) 
       {
            dataOut.normal = matrices.normal_matrix * inNormal;
            dataOut.eye = -vec3(matrices.modelview_matrix * inPosition);
            gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
       }
     #FRAGMENTPROGRAM
        out vec4 outColor; // here goes the final color
           
        in Data
        {
           vec3 normal;
           vec3 eye;
        } dataIn; // this data comes from the vertex program
 
        void main() 
        {
          // normalize both input vectors
          vec3 n = normalize(dataIn.normal);
          vec3 e = normalize(dataIn.eye);
          
          float refractiveIndex = 1.5;
          vec3 refractedDirection = refract(-e,n, 1.0 / refractiveIndex);
          vec4 refractColor = texture(_reflectionMap, refractedDirection);
          
          vec3 reflectedDirection = reflect(-e,n);
          vec4 reflectColor = texture(_reflectionMap, reflectedDirection);
          
          outColor = vec4(mix(refractColor.rgb,reflectColor.rgb, 0.5),max(refractColor.a,reflectColor.a));
        }
   }
 }