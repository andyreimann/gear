Ubershader "GEAR/Default" {
   LocationBindings {
     inPosition ("Vertex Position", vec4) = { POSITION }
     inColor ("Vertex Color", vec4) = { COLOR_0 }
     inNormal ("Vertex Normal", vec3) = { NORMAL }
   }
   Shader "GLSL" {
     #VERTEXPROGRAM
       #INCLUDE "G2.matrices"
 
       out Data
       {
          vec3 normal;
          vec3 eye;
          vec4 color;
       } dataOut; 
 
       void main(void) 
       {
            dataOut.normal = matrices.normal_matrix * inNormal;
            dataOut.eye = -vec3(matrices.modelview_matrix * inPosition);
           	gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
            dataOut.color = inColor;
       }
     #FRAGMENTPROGRAM
       #INCLUDE "G2.material" // include GEAR default stuff
       #INCLUDE "G2.light" // include GEAR default stuff

        out vec4 outColor; // here goes the final color
   
        in Data
        {
           vec3 normal;
           vec3 eye;
           vec4 color;
        } dataIn; // this data comes from the vertex program
 
        void main() 
        {
          // set the specular term to black
          vec4 spec = vec4(0.0);

          // normalize both input vectors
          vec3 n = normalize(dataIn.normal);
          vec3 e = normalize(dataIn.eye);

          // set color to ambient material term
          outColor = material.ambient;

          for(int i = 0; i < G2ActiveLights; ++i)
          {
            if(light[i].position.w == 0.0)
            {
              // directional light
              float intensity = max(dot(n,light[i].direction), 0.0);

              // if the vertex is lit compute the specular color
              if (intensity > 0.0) 
              {
                // compute the half vector
                vec3 h = normalize(light[i].direction + e);
                // compute the specular term into spec
                float intSpec = max(dot(h,n), 0.0);
                spec = light[i].specular * material.specular * pow(intSpec,material.shininess);
              }
              outColor += max(intensity * light[i].diffuse * material.diffuse + spec, light[i].ambient + material.ambient);
            }
            else if(light[i].cosCutoff < 1.0)
            {
              // spot light
              float intensity = 0.0;
              vec4 spec = vec4(0.0);
           
              // Compute the ligt direction
              vec3 l = vec3(light[i].position)+dataIn.eye;
              float dist = length(l);
              l = normalize(l);
              vec3 sd = normalize(vec3(-light[i].direction));
           
              // inside the cone?
              if (dot(sd,l) > light[i].cosCutoff) 
              {
                vec3 n = normalize(dataIn.normal);
                intensity = max(dot(n,l), 0.0);
         
                if (intensity > 0.0) 
                {
                    float att = 1.0 / (light[i].attenuation.x +
                            light[i].attenuation.y * dist +
                            light[i].attenuation.z * dist * dist);
                    vec3 eye = normalize(dataIn.eye);
                    vec3 h = normalize(l + eye);
                    float intSpec = max(dot(h,n), 0.0);
                    spec = att * light[i].specular * material.specular * pow(intSpec, material.shininess);
                }
              }
              outColor += max(intensity * light[i].diffuse * material.diffuse + spec, light[i].ambient + material.ambient);
              //outColor = vec4(1.f,0.f,0.f,1.f);
            }
            else
            {
              // point light

              vec4 spec = vec4(0.0);

              // Compute the ligt direction
              vec3 l = vec3(light[i].position)+dataIn.eye;
              float dist = length(l);
              l = normalize(l);
              vec3 n = normalize(dataIn.normal);
              vec3 e = normalize(dataIn.eye);

              float intensity = max(dot(n,l), 0.0);
              if (intensity > 0.0) 
              {
                float att = 1.0 / (light[i].attenuation.x +
                        light[i].attenuation.y * dist +
                        light[i].attenuation.z * dist * dist);
                vec3 h = normalize(l + e);
                float intSpec = max(dot(h,n), 0.0);
                spec = att * light[i].specular * material.specular * pow(intSpec, material.shininess);
              }
              outColor += max(intensity * light[i].diffuse * material.diffuse + spec, light[i].ambient + material.ambient);
            }
          }
        }
   }
 }