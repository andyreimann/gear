Ubershader "GEAR/Multipass" {
   LocationBindings {
     inPosition ("Vertex Position", vec4) = { POSITION }
     inTexCoord ("Texture Coordinate", vec2) = { TEXCOORD_0 }
   }
   Properties {
       _shadowTex ("The shadow texture of a pointlight", samplerCube) = { SHADOW }
   }
   Shader "GLSL" {
     Passes {
        Pass {
           LocationBindings {
             inPosition ("Vertex Position", vec4) = { POSITION }
             inColor ("Vertex Color", vec4) = { COLOR_0 }
           }
           Settings {
              Name "ShadowPass"
              RenderTarget _shadowTex
              // Select, what kind of output data you want to capture in the RenderTarget: RGB, RGBA, DEPTH, LUMINANCE, INTENSITY, ...
              OutputFormat DEPTH
              PointOfView LOCAL
           }

           #VERTEXPROGRAM
             #INCLUDE "G2.matrices" 
       
             out Data
             {
                vec4 color;
             } dataOut; 

             void main(void) 
             {
                  gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
                  dataOut.color = inColor;
             }
           #FRAGMENTPROGRAM
           #INCLUDE "G2.material"
           
              in Data
              {
                 vec4 color;
              } dataIn; // this data comes from the vertex program

              out vec4 outColor; // here goes the final color
              void main() 
              {
                outColor = material.diffuse;
              }
        }
     }
     #VERTEXPROGRAM
       #INCLUDE "G2.matrices"
 
       out Data
       {
          vec2 texCoord;
       } dataOut; 
 
       void main(void) 
       {
            dataOut.texCoord = inTexCoord;
           	gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
       }
     #FRAGMENTPROGRAM

        in Data
        {
           vec2 texCoord;
        } dataIn; // this data comes from the vertex program

        out vec4 outColor; // here goes the final color
   
        void main() 
        {
          outColor = texture(_shadowTex, vec3(0.5,0.5,0.5));
        }
   }
 }