Ubershader "Example/Simple" {
   LocationBindings {
     inPosition ("Vertex Position", vec4) = { POSITION } // define a location binding for incoming vertices
   }
   Properties {
       _color ("Color", vec4) // define a uniform variable
       _sample ("Color 2", vec4) = {vec4(0,0,1,1)} // define a uniform variable with default value
   }
   Shader "GLSL" {
     #VERTEXPROGRAM
       #INCLUDE "G2.matrices" // include GEAR default stuff
       #INCLUDE "G2.material" // include GEAR default stuff
 
       out Data {
           vec4 color;
       } dataOut; // this data will be sent to the fragment program
 
       void main(void) {

           	gl_Position = (matrices.projection_matrix * matrices.modelview_matrix) * inPosition; // write position of vertex using GEAR default filled matrices
           	
           	#IF LIGHTS == 3
				dataOut.color = _color;
			#ELSE
				dataOut.color = vec4(0,1,0,1);
			#ENDIF
       }
     #FRAGMENTPROGRAM
       #INCLUDE "G2.light" // include GEAR default stuff

       out vec4 outColor; // here goes the final color
 
       in Data {
           vec4 color;
       } dataIn; // this data comes from the vertex program
 
       void main() {
           // just write solid color

           	#IF LIGHTS == 3
				outColor = dataIn.color;
			#ELSE
				outColor = vec4(0,1,0,1);
			#ENDIF
           
       }
   }
 }