Ubershader "GEAR/Default" {
   Shader "CG" {
      #VERTEXPROGRAM
      #INCLUDE "G2.matrices"

      // Application to Vertex Shader Data
      struct A2VData
      {
        float4 position : POSITION;
        float3 normal : NORMAL;
      };
      // Vertex to Fragment Shader Data
      struct V2FData
      {
        float4 position : POSITION;
        float4 eye : TEXCOORD0;
        float3 normal : TEXCOORD1;
      };

      V2FData main(A2VData dataIn) 
      {
        float4x4 mvpm = mul(matrices.projection_matrix, matrices.modelview_matrix);
        V2FData dataOut;
        dataOut.position = mul(mvpm, dataIn.position);
        dataOut.normal = mul(matrices.normal_matrix, dataIn.normal);
        dataOut.eye = mul(matrices.modelview_matrix, dataIn.position);
        return dataOut;
      }
      // ---------------------------------------------------------------
      #FRAGMENTPROGRAM
      #INCLUDE "G2.material"

      struct DirectionalLight 
      {
          float3 dir; // camera space
      };
      uniform DirectionalLight light;

      struct Data 
      {
        float4 color : COLOR;
      };

      // Vertex to Fragment Shader Data
      struct V2FData
      {
        float4 position : POSITION;
        float4 eye : TEXCOORD0;
        float3 normal : TEXCOORD1;
      };

      Data main(V2FData dataIn)
      {


        // set the specular term to black
        float4 spec = float4(0.0);

        // normalize both input vectors
        float3 n = normalize(dataIn.normal);
        float3 e = normalize(dataIn.eye.xyz);
        float intensity = max(dot(n,light.dir), 0.0);

        // if the vertex is lit compute the specular color
        if (intensity > 0.0) 
        {
          // compute the half vector
          float3 h = normalize(light.dir + e);
          // compute the specular term into spec
          float intSpec = max(dot(h,n), 0.0);
          spec = material.specular * pow(intSpec,material.shininess);
        }

        Data dataOut;
        dataOut.color = max(intensity * material.diffuse + spec, material.ambient);
        return dataOut;
      }
   }
 }